# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение
# (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления
# должно осуществляться округление значения до целого числа.

# 1. Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
# 2. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# 3. Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# 4. Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество
# ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку
# вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15,
# количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, cell_num):
        self.cell_num = cell_num

    def __str__(self):
        return f'{self.cell_num}'

    def __add__(self, other):
        return f'Сумма ячеек равна {self.cell_num + other.cell_num}'

    def __mul__(self, other):
        return f'Произведение ячеек равно {self.cell_num * other.cell_num}'

    def __sub__(self, other):
        if self.cell_num - other.cell_num <= 0:
            return 'Вычитание невозможно (вычитаемое > уменьшаемого)'
        else:
            return f'Разность ячеек равна {self.cell_num - other.cell_num}'

    def __floordiv__(self, other):
        return f'Деление ячеек равно {self.cell_num // other.cell_num}'

    def make_order(self, rows):
        total = self.cell_num
        lst = []
        for i in range(self.cell_num // rows + 1):
            if total < rows:
                lst.append(f'{"*" * total}\n')
            if total > rows:
                total = total - rows
                lst.append(f'{"*" * rows}\n')
        print('', *lst)


cell_1 = Cell(10)
cell_2 = Cell(6)
print(cell_1 + cell_2)   #Сумма ячеек равна 16
print(cell_1 - cell_2)   #Разность ячеек равна 4
print(cell_1 * cell_2)   #Произведение ячеек равно 60
print(cell_1 // cell_2)  #Деление ячеек равно 1
print(cell_2 - cell_1)   #Вычитание невозможно (вычитаемое > уменьшаемого)

cell_3 = Cell(23)
cell_3.make_order(5)
#Результат:
#  *****
#  *****
#  *****
#  *****
#  ***

# Решил рекурсией, но без красивого вывода:
# def make_order(self, rows):
#     if self.cell_num < rows:
#         return f'{"*" * self.cell_num}'
#     if self.cell_num >= rows:
#         self.cell_num = self.cell_num - rows
#         return f'{"*" * rows}', self.make_order(rows)
